---
title: "Global and Local Random Forest Regression"
format: html
editor: visual
---

## Library

```{r}
#| echo: false
#library(plyr)         ## Data management
library(tidyverse)         ## Data management
library(sp)           ## Spatial Data management
#library(spdep)        ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(raster)       ## spatial data
library(grid)         ## plot
library(gridExtra)    ## Multiple plot
library(ggplot2)      #  plotting
#library(tidyverse)    # data 
library(SpatialML)    # Geographically weighted regression
#library(randomForest)
#library(caret)      # 機器學習建模套件

library(plotly)
library(vip)
library(pdp)
```

# 讀入資料

## county

```{r}
county <- shapefile("./Data_GWR/COUNTY_ATLANTIC.shp")
county |> class()
```

```{r}
county |> dim()
```

```{r}
county |> head()
```

```{r}
county@data$COUNTY |> unique() |> length()
```

```{r}
county@data |> 
    filter(COUNTY == "York County") |> 
    select(DIVISION, STATE, COUNTY)
```

```{r}
county |> plot()
```

## state

```{r}
state <- shapefile("./Data_GWR/STATE_ATLANTIC.shp")
state |> class()
```

```{r}
state |> dim()
```

```{r}
state |> head()
```

```{r}
state@data |> select(STATE) |> unique() |> pull() |> length()
```

```{r}
plot(state)
```

```{r}
plot(county, border = "#4ade80")
plot(state, border = "#f87171", add = TRUE)
```

```{r}
spplot(
    county,
    zcol = "STATE_ID",
    col.regions = c("#4ade80"),
    colorkey = FALSE,
    sp.layout = list(
        state,
        col = "#f87171",
        lwd = 3,
        fill = "#fef2f2",
        alpha = .1,
        first = FALSE
    ),
    scales = list(draw = TRUE)
)
```

```{r}
df <- readr::read_csv("./Data_GWR/data_all_1998_2012.csv")
```

```{r}
df |> str()
```

```{r}
df |> head()
```

```{r}
train_df <- df |> 
    select(FIPS, x, y, Year, POVERTY, SMOKING, PM25, NO2, SO2, Rate) |> 
    filter(Year == 2010) |> 
    arrange(FIPS)

valid_df <- df |> 
    select(FIPS, x, y, Year, POVERTY, SMOKING, PM25, NO2, SO2, Rate) |> 
    filter(Year == 2011) |> 
    arrange(FIPS)

test_df <- df |> 
    select(FIPS, x, y, Year, POVERTY, SMOKING, PM25, NO2, SO2, Rate) |> 
    filter(Year == 2012) |> 
    arrange(FIPS)

```

# 建模

```{r}
train_df |> str()
```

```{r}
train_df |> head()
```

```{r}
response <- "Rate"
predictors <- c("POVERTY", "SMOKING", "PM25", "NO2", "SO2")
formula_str <- predictors |> paste(collapse = " + ") |> paste("~", ... = _)
```

```{r}
rf_model <- ranger::ranger(
    as.formula(formula_str),
    data = train_df,
    num.trees = 500,
    mtry = 5,
    max.depth = 20,
    replace = TRUE,
    sample.fraction = 1,
    oob.error = TRUE
)
rf_model_1 <- rf_model
rf_model |> class()
```

```{r}
# 打錯字
rf_model$prediction.error
```

```{r}
rf_model$prediction.error |> sqrt()
```

```{r}
rf_model$r.squared
```

```{r}
pred_valid <- predict(rf_model, data = valid_df[, predictors])

temp <- valid_df[, response] - pred_valid$predictions
temp ** 2 |> pull() |> mean() |> sqrt()
```

```{r}
temp |> abs() |> pull() |> mean()
```

```{r}
lm(valid_df$Rate ~ pred_valid$predictions) |> 
    summary() |> 
    {\(x) x$r.squared}()
```

```{r}
train_df |> 
    dim()
```

## 超參數訓練

```{r}
hyper_grid <- expand.grid(
    num.trees = seq(100, 5000, by = 10),
    max.depth = seq(10, 50, by = 10),
    sample.fraction = seq(.7, 1, by = .1)
)
hyper_grid |> dim()
```

```{r}
hyper_grid <- hyper_grid |> 
    mutate(
        oob.RMSE = 0, 
        oob.R2 = 0, 
        valid.RMSE = 0, 
        valid.MAE = 0, 
        valid.R2 = 0
    )
```

```{r}
#| eval: false
time_started <- proc.time()

for (i in 1:nrow(hyper_grid))
{
    num_trees <- hyper_grid[i, 'num.trees']
    max_depth <- hyper_grid[i, 'max.depth']
    sample_fraction <- hyper_grid[i, 'sample.fraction']
    rf_model <- ranger::ranger(
        as.formula(formula_str),
        data = train_df,
        num.trees = num_trees,
        max.depth = max_depth,
        sample.fraction = sample_fraction
    )
    hyper_grid[i, 'oob.RMSE'] <- rf_model$prediction.error
    hyper_grid[i, 'oob.R2'] <- rf_model$r.squared
    pred_valid <- predict(rf_model, data = valid_df[, predictors])
    temp <- valid_df[, response] - pred_valid$predictions
    hyper_grid[i, 'valid.RMSE'] <- temp ** 2 |> pull() |> mean() |> sqrt()
    hyper_grid[i, 'valid.MAE'] <- temp |> abs() |> pull() |> mean()
    hyper_grid[i, 'valid.R2'] <- lm(valid_df$Rate ~ pred_valid$predictions) |> 
        summary() |> 
        {\(x) x$r.squared}()
}
time_finished <- proc.time()
time_finished - time_started

saveRDS(hyper_grid, "./Data_GWR/hypergrid.RDS")
```
